#!/usr/bin/env python3
# Software License Agreement (BSD)
#
# @author    Roni Kreinin <rkreinin@clearpathrobotics.com>
# @copyright (c) 2023, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import robot_upstart

from clearpath_config.common.utils.yaml import read_yaml
from clearpath_config.clearpath_config import ClearpathConfig
from clearpath_generator_common.common import BaseGenerator

from ament_index_python.packages import get_package_share_directory

import os


class PlatformProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        platform_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-platform.service')
        with open(platform_service_path) as f:
            platform_service_contents: str = ''
            platform_service_lines = f.readlines()
            for line in platform_service_lines:
                # Replace User with username from config
                if 'User=' in line:
                    line = 'User={0}\n'.format(clearpath_config.system.username)
                platform_service_contents += line
        return {
            "/lib/systemd/system/clearpath-platform.service": {
                "content": platform_service_contents,
                "mode": 0o644
            },
            "/etc/systemd/system/clearpath-robot.service.wants/clearpath-platform.service": {
                "symlink": "/lib/systemd/system/clearpath-platform.service"
            }
        }


class SensorsProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        sensors_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-sensors.service')
        with open(sensors_service_path) as f:
            sensors_service_contents: str = ''
            sensors_service_lines = f.readlines()
            for line in sensors_service_lines:
                # Replace User with username from config
                if 'User=' in line:
                    line = 'User={0}\n'.format(clearpath_config.system.username)
                sensors_service_contents += line
        return {
            "/lib/systemd/system/clearpath-sensors.service": {
                "content": sensors_service_contents,
                "mode": 0o644
            },
            "/etc/systemd/system/clearpath-robot.service.wants/clearpath-sensors.service": {
                "symlink": "/lib/systemd/system/clearpath-sensors.service"
            }
        }


class ManipulatorsProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        manipulators_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-manipulators.service')
        with open(manipulators_service_path) as f:
            manipulators_service_contents: str = ''
            manipulators_service_lines = f.readlines()
            for line in manipulators_service_lines:
                # Replace User with username from config
                if 'User=' in line:
                    line = 'User={0}\n'.format(clearpath_config.system.username)
                manipulators_service_contents += line
        return {
            "/lib/systemd/system/clearpath-manipulators.service": {
                "content": manipulators_service_contents,
                "mode": 0o644
            },
            "/etc/systemd/system/clearpath-robot.service.wants/clearpath-manipulators.service": {
                "symlink": "/lib/systemd/system/clearpath-manipulators.service"
            }
        }


class DiscoveryServerProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        discovery_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-discovery.service')
        with open(discovery_service_path) as f:
            discovery_service_contents: str = ''
            discovery_service_lines = f.readlines()
            for line in discovery_service_lines:
                # Replace User with username from config
                if 'User=' in line:
                    line = 'User={0}\n'.format(clearpath_config.system.username)
                discovery_service_contents += line

        return {
            "/lib/systemd/system/clearpath-discovery.service": {
                "content": discovery_service_contents,
                "mode": 0o644
            },
            "/etc/systemd/system/clearpath-robot.service.wants/clearpath-discovery.service": {
                "symlink": "/lib/systemd/system/clearpath-discovery.service"
            }
        }


class RobotProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        robot_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-robot.service')
        robot_service_execpre_contents_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/generate')
        robot_service_exec_contents_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/check')

        with open(robot_service_path) as f:
            robot_service_contents: str = ''
            robot_service_lines = f.readlines()
            for line in robot_service_lines:
                # Replace User with username from config
                if 'User=' in line:
                    line = 'User={0}\n'.format(clearpath_config.system.username)
                robot_service_contents += line
        with open(robot_service_execpre_contents_path) as f:
            robot_service_execpre_contents = f.read()
        with open(robot_service_exec_contents_path) as f:
            robot_service_exec_contents = f.read()
        return {
            "/lib/systemd/system/clearpath-robot.service": {
                "content": robot_service_contents,
                "mode": 0o644
            },
            "/usr/sbin/clearpath-robot-generate": {
                "content": robot_service_execpre_contents,
                "mode": 0o755
            },
            "/usr/sbin/clearpath-robot-check": {
                "content": robot_service_exec_contents,
                "mode": 0o755
            }
        }


setup_path = BaseGenerator.get_args()
workspace_setup = os.path.join(setup_path, 'setup.bash')
config_path = os.path.join(setup_path, 'robot.yaml')
platform_service_launch = os.path.join(
    setup_path,
    'platform/launch/platform-service.launch.py')
sensors_service_launch = os.path.join(
    setup_path,
    'sensors/launch/sensors-service.launch.py')
manipulators_service_launch = os.path.join(
    setup_path,
    'manipulators/launch/manipulators-service.launch.py')

# Create Dummy Launch
if not os.path.isfile(platform_service_launch):
    os.makedirs(os.path.dirname(platform_service_launch), exist_ok=True)
    open(platform_service_launch, 'w+').close()
if not os.path.isfile(sensors_service_launch):
    os.makedirs(os.path.dirname(sensors_service_launch), exist_ok=True)
    open(sensors_service_launch, 'w+').close()
if not os.path.isfile(manipulators_service_launch):
    os.makedirs(os.path.dirname(manipulators_service_launch), exist_ok=True)
    open(manipulators_service_launch, 'w+').close()

# Read YAML
config = read_yaml(config_path)
# Parse YAML into config
clearpath_config = ClearpathConfig(config)

rmw = clearpath_config.system.middleware.rmw_implementation
domain_id = clearpath_config.system.domain_id

# Platform
platform = robot_upstart.Job(
    name='clearpath-platform',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

platform.symlink = True
platform.add(filename=platform_service_launch)
platform.install()

platform_extras = robot_upstart.Job(workspace_setup=workspace_setup)
platform_extras.install(Provider=PlatformProvider)

# Sensors
sensors = robot_upstart.Job(
    name='clearpath-sensors',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

sensors.symlink = True
sensors.add(filename=sensors_service_launch)
sensors.install()

sensors_extras = robot_upstart.Job(workspace_setup=workspace_setup)
sensors_extras.install(Provider=SensorsProvider)

# Manipulators
manipulators = robot_upstart.Job(
    name='clearpath-manipulators',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

manipulators.symlink = True
manipulators.add(filename=manipulators_service_launch)
manipulators.install()

manipulators_extras = robot_upstart.Job(workspace_setup=workspace_setup)
manipulators_extras.install(Provider=ManipulatorsProvider)

# Discovery Server
discovery_server = robot_upstart.Job(workspace_setup=workspace_setup)
discovery_server.install(Provider=DiscoveryServerProvider)

# Robot
robot = robot_upstart.Job(workspace_setup=workspace_setup)
robot.install(Provider=RobotProvider)

print('** To complete installation please run the following command:')
print('  sudo systemctl daemon-reload && sudo systemctl start clearpath-robot')
